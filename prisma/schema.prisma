generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Deal {
  id           String    @id @default(cuid())
  slug         String    @unique
  title        String
  description  String?
  price        Float
  salePrice    Float?
  platformId   String?
  shopId       String?
  affiliateUrl String?
  rating       Float?
  cod          Boolean   @default(true)
  image        String?
  gallery      String?
  youtubeUrl   String?
  area         String
  category     String
  discountType String
  isActive     Boolean   @default(true)
  publishedAt  DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  viewCount    Int       @default(0)
  clicks       Click[]
  platform     Platform? @relation(fields: [platformId], references: [id])
  shop         Shop?     @relation(fields: [shopId], references: [id])
  orders       Order[]

  @@map("deals")
}

model Click {
  id        String   @id @default(cuid())
  dealId    String
  createdAt DateTime @default(now())
  deal      Deal     @relation(fields: [dealId], references: [id])

  @@map("clicks")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  shops         Shop[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Platform {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  color       String   @default("bg-gray-500")
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deals       Deal[]

  @@map("platforms")
}

model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  excerpt     String
  content     String
  image       String
  youtubeUrl  String?
  category    String
  area        String
  author      String
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(true)
  viewCount   Int      @default(0)

  @@map("posts")
}

model Election {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  content     String
  image       String?
  youtubeUrl  String?
  category    String
  area        String
  author      String
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(true)
  viewCount   Int      @default(0)

  @@map("elections")
}

model View {
  id        String   @id @default(cuid())
  type      String
  contentId String
  userAgent String?
  ipAddress String?
  referrer  String?
  createdAt DateTime @default(now())

  @@map("views")
}

model Shop {
  id               String    @id @default(cuid())
  name             String
  slug             String    @unique
  description      String?
  ownerName        String
  email            String
  phone            String
  whatsapp         String?
  address          String
  area             String
  category         String
  businessHours    String?
  image            String?
  isVerified       Boolean   @default(false)
  isActive         Boolean   @default(true)
  rating           Float?    @default(0)
  totalOrders      Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String?
  activatedAt      DateTime?
  activatedBy      String?
  activationNotes  String?
  paymentReference String?
  status           String    @default("pending")
  deals            Deal[]
  orders           Order[]
  user             User?     @relation(fields: [userId], references: [id])

  @@map("shops")
}

model Order {
  id              String   @id @default(cuid())
  dealId          String
  shopId          String
  customerName    String
  customerPhone   String
  customerAddress String
  quantity        Int      @default(1)
  totalAmount     Float
  status          String   @default("pending")
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  customerEmail   String?
  customerMessage String?
  orderType       String   @default("cod")
  deal            Deal     @relation(fields: [dealId], references: [id])
  shop            Shop     @relation(fields: [shopId], references: [id])

  @@map("orders")
}

model ContactInfo {
  id            String   @id @default(cuid())
  email         String
  phone         String
  whatsapp      String
  address       String
  businessHours String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("contact_info")
}
