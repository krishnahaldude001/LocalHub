// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")  // pooler
  directUrl = env("DIRECT_URL")    // direct
}

model Deal {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  description  String?
  price        Float
  salePrice    Float?
  platformId   String
  platform     Platform @relation(fields: [platformId], references: [id])
  affiliateUrl String
  rating       Float?   // 0-5
  cod          Boolean  @default(false)
  image        String?
  gallery      String?  // JSON string of image URLs array
  area         String   // Govandi, Shivaji Nagar, Baiganwadi
  publishedAt  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  clicks Click[]

  @@map("deals")
}

model Click {
  id        String   @id @default(cuid())
  dealId    String
  deal      Deal     @relation(fields: [dealId], references: [id])
  createdAt DateTime @default(now())

  @@map("clicks")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // user, admin, editor, dealer, news_writer
  password      String?   // For credentials authentication
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Platform model for dynamic platform management
model Platform {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  color       String   @default("bg-gray-500")
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  deals Deal[]

  @@map("platforms")
}

// News/Posts model for Phase 2
model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  excerpt     String
  content     String
  image       String
  category    String
  area        String
  author      String
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(true)

  @@map("posts")
}
